import os
from datetime import datetime

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ —Å –¥–∞—Ç–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def create_date_folder():
    today = datetime.now().strftime('%m.%d.%Y')  # –§–æ—Ä–º–∞—Ç –ø–∞–ø–∫–∏: –ú–ú.–î–î.–ì–ì–ì–ì
    if not os.path.exists(today):
        os.makedirs(today)
    return today

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª
def log_problem(problem_number, problem_name, difficulty, topics):
    folder = create_date_folder()
    file_name = f"{problem_number}_{problem_name.replace(' ', '_')}.cpp"
    file_path = os.path.join(folder, file_name)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∑–∞–¥–∞—á–µ–π, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(file_path):
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(f"// Solution for problem {problem_number}: {problem_name}\n")
            f.write(f"// Difficulty: {difficulty}\n")
            f.write(f"// Topics: {topics}\n\n")
            f.write("// Your solution code goes here.\n\n")
            f.write("#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n") # –¥–æ–±–æ–∞–≤–ª—è—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã !
        print(f"–§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ '{folder}'.")
    else:
        print(f"–§–∞–π–ª '{file_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º README —Å –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ–π
    update_readme(problem_number, problem_name, difficulty, topics)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è README.md
def create_or_update_readme():
    readme_path = 'README.md'
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ README.md
    if not os.path.exists(readme_path):
        with open(readme_path, 'w', encoding='utf-8') as f:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            f.write("# LeetCode Practice Marathon üèÅ\n\n")
            f.write("## Overview\n")
            f.write("Welcome to my **LeetCode Practice Marathon** repository! This repository is dedicated to improving my problem-solving and algorithmic skills by solving coding challenges from LeetCode. The goal is to maintain consistency in problem-solving by tackling problems daily and tracking my progress. All solutions are organized by the date they were solved, along with the problem's difficulty and topics covered.\n\n")
            f.write("## Goals\n")
            f.write("- Solve at least **one LeetCode problem every day**.\n")
            f.write("- Enhance my understanding of **data structures** and **algorithms**.\n")
            f.write("- Track my daily progress and reflect on improvements over time.\n")
            f.write("- Build solutions in **C++**, with a focus on writing efficient and clean code.\n\n")
            f.write("## Structure\n")
            f.write("Each problem is saved in a folder named after the date it was solved:\n\n")
            f.write("```\n")
            f.write("|-- /MM.DD.YYYY\n")
            f.write("|    |-- problem_number_problem_name.cpp\n")
            f.write("```\n\n")
            f.write("## Solved Problems\n\n")
            f.write("| Problem Number | Problem Name | Difficulty | Topics | Date Solved |\n")
            f.write("|----------------|--------------|------------|--------|-------------|\n")
    else:
        print("README.md —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è README.md —Å –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ–π
def update_readme(problem_number, problem_name, difficulty, topics):
    readme_path = 'README.md'
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ README.md
    if not os.path.exists(readme_path):
        create_or_update_readme()  # –ï—Å–ª–∏ README.md –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –≤ –∫–æ–Ω–µ—Ü README
    with open(readme_path, 'a', encoding='utf-8') as f:
        date_solved = datetime.now().strftime('%m.%d.%Y')
        f.write(f"| {problem_number} | {problem_name} | {difficulty} | {topics} | {date_solved} |\n")
    
    print(f"README.md –æ–±–Ω–æ–≤–ª–µ–Ω —Å –∑–∞–¥–∞—á–µ–π {problem_number}: {problem_name}.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ Git
def git_push(problem_number):
    try:
        os.system("git add .")
        commit_message = f"Add tsk {problem_number} at {datetime.now().strftime('%m.%d.%Y')}"
        os.system(f'git commit -m "{commit_message}"')
        os.system("git push")
        print("–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—à–µ–Ω—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ git –∫–æ–º–∞–Ω–¥: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    create_or_update_readme()  # –°–æ–∑–¥–∞–µ–º README, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    
    problem_number = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏: ")
    problem_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ")
    difficulty = input("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ (Easy, Medium, Hard): ")
    topics = input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ø–∏–∫–∏ –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Arrays, Dynamic Programming): ")
    
    log_problem(problem_number, problem_name, difficulty, topics)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã git –¥–ª—è –ø—É—à–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    git_push(problem_number)

if __name__ == "__main__":
    main()
